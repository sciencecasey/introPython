Casey Richards, cricha87
Module 5, k-means clustering. Due: 2/28/21

I started by reading the file in the suggested format by the reading, with open() statement.  I did this so that it would automatically close.  I immediately stored the maximum iteration, number of points, number of clusters, and number of kmeans into variables.  Then I stored the centroids' indeces in a list called centers.  I sorted the centers so that I could save based on each location and move to the next center points' index after reaching the first.  I stored the points themselves in a list, as tuples, before moving them into a doubly nested groups list (outer containing all 4 groups, and inner for each group) or the center list.  Originally, I went through the first kmean allocation in it's own loop so that I could add the centers to the lists, but I left the first iteration for simplicity even after removing the component adding the centroids to the groups themselves (after Joe's announcement).
To run the kmean calculation, I calculated the number of times an item was moved from one group to another and used the metric that if anything was moved, the loop would continue.  Joe asked us to use the length of the groups, and while I did this as well (commented out still in the code) with the same result, this would not necessarily work accurately with other datasets.  One problem I had was calculating the average.  I tried using the sum of all the x-points in the group, but for some reason sum(groups[groupIndex[0]]) did not give the correct average and was breaking the code.  It took a lot of time to understand that was the issue, so I look forward to learning functions where it is easier to test each component individually :). 

Looking at the question, I see that calculating the average as the last step of the loop is inefficient, but I did this first so that avoided that inefficiency.  If I were to optimize further and use a structure closer to the one suggested, I would delete my initial allocation and use the same loop for each iteration, but only calculate the average if the num_kmeans = 0 (in other words, the very first time).  It was also suggested to loop through the code a set number of times (that read in initially) and this could've been used, but I avoided that with the if clause to exit the while loop at the stable case. 

There are no known bugs in my code.  